[tool.poetry]
name = "wheel-doctor"
version = "0.0.0"
description = ""
authors = ["Lukas Bindreiter"]
readme = "README.md"
license = "MIT"
packages = [{include = "wheel_doctor"}]

[tool.poetry-dynamic-versioning]
enable = true

[tool.poetry.dependencies]
python = ">=3.10,<4"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
pytest-cov = "^4.0.0"
black = "^23.3.0"
ruff = "^0.0.264"
mypy = "^1.2.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/foo.py  # exclude a file named foo.py in the root of the project (in addition to the defaults)
'''

[tool.ruff]
line-length = 88
target-version = "py310"
select = ["ALL"]
# if you are integrating the template into an existing codebase you may want to start off with this:
# (which is the ruff default, and should be achievable with minimal effort):
# select = ["E", "F"]

# list of rules: https://beta.ruff.rs/docs/rules
# (ignore list was created for ruff v0.0.256 from 2023-03-15)
ignore = [
  # disabled whole checking modules
  "D",          # pydocstyle -> no consistent style agreed upon yet, and way to strict anyways
  "FBT",        # flake8-boolean-trap -> boolean arguments make sense, e.g. in command line applications as flags
  "COM",        # flake8-commas -> comma checking is handled by black
  "DTZ",        # flake8-datetimez -> utc datetimes make sense in certain applications
  "DJ",         # flake8-django -> we are not using it
  "EM",         # flake8-errmsg -> str directly in Exception constructor is accetable
  "INP",        # flake8-no-pep420 -> implicit namespace packages are a useful feature
  "T20",        # flake8-print -> print statements can make sense in some contexts
  "TCH",        # flake8-type-checking -> never really used type checking blocks
  # disabled specific rules
  "ANN101",     # missing-type-self -> self doesn't need type information
  "ANN102",     # missing-type-cls -> cls doesn't need type information
  "ANN401",     # any-type -> allow Any in *args and **kwargs
  "S101",       # assert -> allow usage of assert
  "B008",       # function-call-argument-default -> some default argument values make sense to be function calls
  "G004",       # logging-f-string -> allow usage of f-strings in logging calls
  "RET504",     # unnecessary-assign -> sometimes it is more readable to assign a variable anyways
  "PLR0913",    # too-many-arguments -> sometimes it just makes sense
  "PLR2004",    # magic-value-comparison -> comparison with some constants (e.g. 0) makes sense
  "TRY003",     # raise-vanilla-args -> not really how exceptions are used in python typically: https://github.com/guilatrova/tryceratops/blob/main/docs/violations/TC003.md
  "TRY400",     # error-instead-of-exception -> logger.error is ok with loguru
]

unfixable = [
  "F841",    # unused-variable -> don't remove them automatically
  "ERA",     # eradicate -> (commented out code), don't remove it automatically
]

[tool.ruff.per-file-ignores]
"tests/*" = []

[tool.mypy]
files = ["grasp", "tests"]
python_version = "3.10"
warn_unreachable = true
warn_return_any = true
disallow_untyped_defs = true
show_error_codes = true
ignore_missing_imports = true
plugins = []
exclude = [".git/", ".venv/", "__pycache__"]

[[tool.mypy.overrides]]
module = "tests.*"
strict_optional = false

[[tool.mypy.overrides]]
module = "some.autogenerated.files.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
addopts = "-Wall -Werror --cov=wheel_doctor --cov-fail-under=50 --cov-report=xml --cov-report=html --cov-branch"
